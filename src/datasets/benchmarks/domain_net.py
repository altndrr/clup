"""Module containing the DomainNet dataset."""

import os
import shutil
import zipfile

import pandas as pd
import requests as r
from rich.progress import track

from src.datasets.base import BaseDataset


class DomainNet(BaseDataset):
    """Implementation of the DomainNet dataset."""

    available_domains = [
        "clipart",
        "infograph",
        "painting",
        "quickdraw",
        "real",
        "sketch",
    ]

    labels = [
        "aircraft carrier",
        "airplane",
        "alarm clock",
        "ambulance",
        "angel",
        "animal migration",
        "ant",
        "anvil",
        "apple",
        "arm",
        "asparagus",
        "axe",
        "backpack",
        "banana",
        "bandage",
        "barn",
        "baseball",
        "baseball bat",
        "basket",
        "basketball",
        "bat",
        "bathtub",
        "beach",
        "bear",
        "beard",
        "bed",
        "bee",
        "belt",
        "bench",
        "bicycle",
        "binoculars",
        "bird",
        "birthday cake",
        "blackberry",
        "blueberry",
        "book",
        "boomerang",
        "bottlecap",
        "bowtie",
        "bracelet",
        "brain",
        "bread",
        "bridge",
        "broccoli",
        "broom",
        "bucket",
        "bulldozer",
        "bus",
        "bush",
        "butterfly",
        "cactus",
        "cake",
        "calculator",
        "calendar",
        "camel",
        "camera",
        "camouflage",
        "campfire",
        "candle",
        "cannon",
        "canoe",
        "car",
        "carrot",
        "castle",
        "cat",
        "ceiling fan",
        "cello",
        "cell phone",
        "chair",
        "chandelier",
        "church",
        "circle",
        "clarinet",
        "clock",
        "cloud",
        "coffee cup",
        "compass",
        "computer",
        "cookie",
        "cooler",
        "couch",
        "cow",
        "crab",
        "crayon",
        "crocodile",
        "crown",
        "cruise ship",
        "cup",
        "diamond",
        "dishwasher",
        "diving board",
        "dog",
        "dolphin",
        "donut",
        "door",
        "dragon",
        "dresser",
        "drill",
        "drums",
        "duck",
        "dumbbell",
        "ear",
        "elbow",
        "elephant",
        "envelope",
        "eraser",
        "eye",
        "eyeglasses",
        "face",
        "fan",
        "feather",
        "fence",
        "finger",
        "fire hydrant",
        "fireplace",
        "firetruck",
        "fish",
        "flamingo",
        "flashlight",
        "flip flops",
        "floor lamp",
        "flower",
        "flying saucer",
        "foot",
        "fork",
        "frog",
        "frying pan",
        "garden",
        "garden hose",
        "giraffe",
        "goatee",
        "golf club",
        "grapes",
        "grass",
        "guitar",
        "hamburger",
        "hammer",
        "hand",
        "harp",
        "hat",
        "headphones",
        "hedgehog",
        "helicopter",
        "helmet",
        "hexagon",
        "hockey puck",
        "hockey stick",
        "horse",
        "hospital",
        "hot air balloon",
        "hot dog",
        "hot tub",
        "hourglass",
        "house",
        "house plant",
        "hurricane",
        "ice cream",
        "jacket",
        "jail",
        "kangaroo",
        "key",
        "keyboard",
        "knee",
        "knife",
        "ladder",
        "lantern",
        "laptop",
        "leaf",
        "leg",
        "light bulb",
        "lighter",
        "lighthouse",
        "lightning",
        "line",
        "lion",
        "lipstick",
        "lobster",
        "lollipop",
        "mailbox",
        "map",
        "marker",
        "matches",
        "megaphone",
        "mermaid",
        "microphone",
        "microwave",
        "monkey",
        "moon",
        "mosquito",
        "motorbike",
        "mountain",
        "mouse",
        "moustache",
        "mouth",
        "mug",
        "mushroom",
        "nail",
        "necklace",
        "nose",
        "ocean",
        "octagon",
        "octopus",
        "onion",
        "oven",
        "owl",
        "paintbrush",
        "paint can",
        "palm tree",
        "panda",
        "pants",
        "paper clip",
        "parachute",
        "parrot",
        "passport",
        "peanut",
        "pear",
        "peas",
        "pencil",
        "penguin",
        "piano",
        "pickup truck",
        "picture frame",
        "pig",
        "pillow",
        "pineapple",
        "pizza",
        "pliers",
        "police car",
        "pond",
        "pool",
        "popsicle",
        "postcard",
        "potato",
        "power outlet",
        "purse",
        "rabbit",
        "raccoon",
        "radio",
        "rain",
        "rainbow",
        "rake",
        "remote control",
        "rhinoceros",
        "rifle",
        "river",
        "roller coaster",
        "rollerskates",
        "sailboat",
        "sandwich",
        "saw",
        "saxophone",
        "school bus",
        "scissors",
        "scorpion",
        "screwdriver",
        "sea turtle",
        "see saw",
        "shark",
        "sheep",
        "shoe",
        "shorts",
        "shovel",
        "sink",
        "skateboard",
        "skull",
        "skyscraper",
        "sleeping bag",
        "smiley face",
        "snail",
        "snake",
        "snorkel",
        "snowflake",
        "snowman",
        "soccer ball",
        "sock",
        "speedboat",
        "spider",
        "spoon",
        "spreadsheet",
        "square",
        "squiggle",
        "squirrel",
        "stairs",
        "star",
        "steak",
        "stereo",
        "stethoscope",
        "stitches",
        "stop sign",
        "stove",
        "strawberry",
        "streetlight",
        "string bean",
        "submarine",
        "suitcase",
        "sun",
        "swan",
        "sweater",
        "swing set",
        "sword",
        "syringe",
        "table",
        "teapot",
        "teddy-bear",
        "telephone",
        "television",
        "tennis racquet",
        "tent",
        "The Eiffel Tower",
        "The Great Wall of China",
        "The Mona Lisa",
        "tiger",
        "toaster",
        "toe",
        "toilet",
        "tooth",
        "toothbrush",
        "toothpaste",
        "tornado",
        "tractor",
        "traffic light",
        "train",
        "tree",
        "triangle",
        "trombone",
        "truck",
        "trumpet",
        "t-shirt",
        "umbrella",
        "underwear",
        "van",
        "vase",
        "violin",
        "washing machine",
        "watermelon",
        "waterslide",
        "whale",
        "wheel",
        "windmill",
        "wine bottle",
        "wine glass",
        "wristwatch",
        "yoga",
        "zebra",
        "zigzag",
    ]

    def __init__(
        self,
        domain: str,
        *args,
        split: str = "train",
        download: bool = False,
        prepare: bool = False,
        **kwargs,
    ) -> None:
        super().__init__(
            *args,
            domain=domain,
            split=split,
            download=download,
            prepare=prepare,
            raw_subdir_images="",
            raw_subdir_labels="",
            **kwargs,
        )

    def download_data(self) -> None:
        data_base_path = "http://csr.bu.edu/ftp/visda/2019/multi-source/"
        text_sub_path = "domainnet/txt"

        # Download all the data files.
        assert self.raw_root is not None, "`raw_root` must be not None"
        for split in self.available_domains:
            filename = split + ".zip"
            output_path = os.path.join(self.raw_root, filename)

            url = os.path.join(data_base_path, filename)
            if split in ["clipart", "painting"]:
                url = os.path.join(data_base_path, "groundtruth", filename)
            stream = r.get(url, stream=True)

            # Download the file in chunks.
            with open(output_path, "wb") as f:
                chunk_size = 8192
                stream_len = int(stream.headers["Content-Length"]) // chunk_size + 1
                iter_stream = stream.iter_content(chunk_size=chunk_size)
                for chunk in track(iter_stream, total=stream_len):
                    f.write(chunk)

            with zipfile.ZipFile(output_path) as file:
                file.extractall(self.raw_root)

        # Download all the text files.
        for domain in self.available_domains:
            for split in ["train", "test"]:
                filename = f"{domain}_{split}.txt"
                url = os.path.join(data_base_path, text_sub_path, filename)

                stream = r.get(url, stream=True)

                with open(os.path.join(self.raw_root, filename), "wb") as f:
                    chunk_size = 8192
                    stream_len = int(stream.headers["Content-Length"]) // chunk_size + 1
                    iter_stream = stream.iter_content(chunk_size=chunk_size)
                    for chunk in track(iter_stream, total=stream_len):
                        f.write(chunk)

    def prepare_data(self) -> None:
        assert self.raw_root is not None, "`raw_root` must be not None"
        assert self.processed_root is not None, "`processed_root` must be not None"

        target_root, _ = os.path.split(self.processed_root)

        label_file = os.path.join(self.raw_labels_dir, f"{self.domain}_{self.split}.txt")
        data = pd.read_csv(label_file, sep=" ")
        data.columns = ["filename", "class_idx"]

        for _, row in track(data.iterrows(), total=len(data)):
            image = os.path.join(self.raw_root, row["filename"])
            label = self.labels[row["class_idx"]].replace(" ", "_").lower()

            dir_name = os.path.join(target_root, self.split, label)
            target_name = os.path.join(dir_name, os.path.basename(image))

            if not os.path.exists(dir_name):
                os.makedirs(dir_name, exist_ok=False)

            shutil.copy(image, target_name)
